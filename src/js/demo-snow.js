// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Color, Emitter, Particle, ParticleSystem, SnowEmitter, SnowParticle, Vector2, canvas, ps, _ref, _ref1;
  Vector2 = require('core/Vector2');
  Emitter = require('core/Emitter');
  Color = require('core/Color');
  Particle = require('core/Particle');
  ParticleSystem = require('core/ParticleSystem');
  require('lib/requestAnimationFrame');
  SnowParticle = (function(_super) {
    __extends(SnowParticle, _super);

    function SnowParticle() {
      _ref = SnowParticle.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SnowParticle.prototype.render = function(ctx) {
      var alpha, scale;
      scale = alpha = (1 - this.age / this.life).toFixed(2);
      ctx.save();
      ctx.fillStyle = "rgba(" + this.color.r + ", " + this.color.g + ", " + this.color.b + ", " + alpha + ")";
      ctx.translate(this.pos.x, this.pos.y);
      ctx.beginPath();
      ctx.arc(0, 0, this.size * scale, 0, Math.PI * 2, true);
      ctx.closePath();
      ctx.fill();
      return ctx.restore();
    };

    return SnowParticle;

  })(Particle);
  SnowEmitter = (function(_super) {
    __extends(SnowEmitter, _super);

    function SnowEmitter() {
      _ref1 = SnowEmitter.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SnowEmitter.prototype.emitParticle = function() {
      var opt;
      opt = {
        pos: new Vector2(window.innerWidth - Math.random() * window.innerWidth * 1.5, Math.random() * -10),
        velocity: new Vector2(this.velocity.x + Math.random() * 10, this.velocity.y),
        life: this.minLife + Math.random() * (this.maxLife - this.minLife),
        size: this.minSize + Math.random() * (this.maxSize - this.minSize),
        color: new Color(255, 255, 255)
      };
      return new SnowParticle(opt);
    };

    return SnowEmitter;

  })(Emitter);
  canvas = document.getElementById('main');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  window.onresize = function() {
    canvas.width = window.innerWidth;
    return canvas.height = window.innerHeight;
  };
  ps = new ParticleSystem(canvas, {
    dt: 0.08,
    maxParticles: 2000
  });
  ps.addEmitter(new SnowEmitter({
    velocity: new Vector2(0, 40),
    minSize: 1,
    maxSize: 5,
    minLife: 20,
    maxLife: 40,
    emissionRate: 2
  }));
  (function() {
    ps.run();
    return requestAnimationFrame(arguments.callee);
  })();
  return window.ps = ps;
});
