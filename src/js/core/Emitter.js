// Generated by CoffeeScript 1.6.3
define(function(require) {
  var Color, Emitter, Particle, Util, Vector2;
  Util = require('./extend');
  Color = require('./Color');
  Vector2 = require('./Vector2');
  Particle = require('./Particle');
  return Emitter = (function() {
    function Emitter(opt) {
      this.pos = opt.pos || new Vector2(0, 0);
      this.velocity = opt.velocity || new Vector2(0, 0);
      this.spread = opt.spread || 0;
      this.emissionRate = opt.emissionRate || 0;
      this.display = opt.display || false;
      this.drawColor = opt.drawColor || Color.red;
      this.particleProto = {
        life: [5, 20],
        size: [5, 10]
      }.extend(opt.particleProto);
    }

    Emitter.prototype.emitOne = function() {
      var opt, rand, variance;
      rand = Util.rand;
      opt = Util.clone(this.particleProto);
      opt.life = rand(opt.life);
      opt.size = rand(opt.size);
      if (!opt.pos) {
        opt.pos = this.pos.clone();
      }
      if (opt.posVariance) {
        variance = opt.posVariance;
        opt.pos.add(new Vector2(rand(variance), rand(variance)));
      }
      if (opt.velocity) {
        opt.velocity.rotate(this.spread * Math.random());
      }
      return new Particle(opt);
    };

    Emitter.prototype.emitParticles = function(pool) {
      var count;
      count = this.emissionRate;
      debugger;
      while (count > 0) {
        pool.push(this.emitOne());
        count--;
      }
    };

    Emitter.prototype.update = function(opt) {
      return this.extend(opt);
    };

    Emitter.prototype.move = function(dt) {
      dt = dt || 1;
      return this.pos.add(this.velocity.multiply(dt));
    };

    Emitter.prototype.render = function(ctx) {
      if (this.display) {
        ctx.save();
        ctx.fillStyle = "rgba(" + this.drawColor.r + ", " + this.drawColor.g + ", " + this.drawColor.b + ", 1)";
        ctx.translate(this.pos.x, this.pos.y);
        ctx.beginPath();
        ctx.arc(0, 0, 5, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.fill();
        ctx.beginPath();
        ctx.fillStyle = '#000';
        ctx.arc(0, 0, 2, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.fill();
        return ctx.restore();
      }
    };

    return Emitter;

  })();
});
