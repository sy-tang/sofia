// Generated by CoffeeScript 1.6.3
var __slice = [].slice;

define(function() {
  var Util;
  Object.prototype.extend = function() {
    var key, object, objects, value, _i, _len;
    objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = objects.length; _i < _len; _i++) {
      object = objects[_i];
      for (key in object) {
        value = object[key];
        this[key] = value;
      }
    }
    return this;
  };
  return Util = {
    rand: function(range) {
      if (range instanceof Array) {
        return range[0] + Math.random() * (range[1] - range[0]);
      } else {
        return Math.random() * 2 * range - range;
      }
    },
    clone: function(obj) {
      var flags, key, newInstance;
      if ((obj == null) || typeof obj !== 'object') {
        return obj;
      }
      if (obj instanceof Date) {
        return new Date(obj.getTime());
      }
      if (obj instanceof RegExp) {
        flags = '';
        if (obj.global != null) {
          flags += 'g';
        }
        if (obj.ignoreCase != null) {
          flags += 'i';
        }
        if (obj.multiline != null) {
          flags += 'm';
        }
        if (obj.sticky != null) {
          flags += 'y';
        }
        return new RegExp(obj.source, flags);
      }
      newInstance = new obj.constructor();
      for (key in obj) {
        newInstance[key] = arguments.callee(obj[key]);
      }
      return newInstance;
    },
    dragging: function(options) {
      /*
          options:
              selector: string
              data: any
              mouse_down: (e) ->
              mouse_move: (e) ->
              mouse_up: (e) ->
              window: object
                  Useful when using in an iframe.
      */

      var $doc, mouse_down, mouse_move, mouse_up, win;
      if (options.window) {
        win = options.window;
      } else {
        win = window;
      }
      $doc = $(win.document);
      mouse_down = function(e) {
        e.data = options.data;
        if (typeof options.mouse_down === "function") {
          options.mouse_down(e);
        }
        $doc.mousemove(mouse_move);
        return $doc.one('mouseup', mouse_up);
      };
      mouse_move = function(e) {
        e.data = options.data;
        return typeof options.mouse_move === "function" ? options.mouse_move(e) : void 0;
      };
      mouse_up = function(e) {
        e.data = options.data;
        if (typeof options.mouse_up === "function") {
          options.mouse_up(e);
        }
        return $doc.off('mousemove', mouse_move);
      };
      return $doc.on('mousedown', options.selector, mouse_down);
    }
  };
});
